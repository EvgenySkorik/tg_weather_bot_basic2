import telebot
from settings import SiteSettings
from datetime import datetime
import os

from database.common.models import db, History
from database.core import crud
from site_api_weather.core import headers, site_api, url


tg_bot = SiteSettings()
bot = telebot.TeleBot(tg_bot.tg_api)

db_write = crud.create()
db_read = crud.retrieve()

ex1_type_err = '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫!\n<b>–í–æ–∑–º–æ–∂–Ω–æ, –í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É, –≤–º–µ—Å—Ç–æ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥!</b>\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /start '
iter_foto = iter([1, 2, 3])
iter_fact = iter([1, 2, 3])


def generic_path() -> None:
    '''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ Foto'''
    cur_path = os.path.dirname(__file__)
    new_path = os.path.join(cur_path, 'foto_pct')
    foto_list: list = [os.path.join(new_path, i_file) for i_file in os.listdir(new_path)]
    fact_list: list = ['–°–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ú–æ—Å–∫–≤–µ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–π ‚Äì 17 –∏—é–ª—è 1940, –±—ã–ª–æ ‚Äì 42,2 –≥—Ä–∞–¥—É—Å–∞',
                       '–í –ë–µ—Ä–ª–∏–Ω–µ –¥–æ–∂–¥—å –∏–¥–µ—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º 100 –¥–Ω–µ–π –≤ –≥–æ–¥—É. –í –≥–æ—Ä–æ–¥–µ 175 –º—É–∑–µ–µ–≤. –¢–∞–∫ —á—Ç–æ –∫–∞–∂–¥—ã–π –¥–æ–∂–¥–ª–∏–≤—ã–π –¥–µ–Ω—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—â–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –º—É–∑–µ–∏',
                       '–°–∞–º—ã–π —Ö–æ–ª–æ–¥–Ω—ã–π –º–µ—Å—è—Ü –≤ –ú–æ—Å–∫–≤–µ ‚Äì —ç—Ç–æ —Ñ–µ–≤—Ä–∞–ª—å. –ù–æ, –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, —á—Ç–æ —Å—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —ç—Ç–æ–≥–æ –ª—é—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤—Å–µ–≥–æ-—Ç–æ –º–∏–Ω—É—Å 6,7 –≥—Ä–∞–¥—É—Å–æ–≤!',
                       '–í –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –µ—Å—Ç—å –±–æ–ª–µ–µ 100 —Å–ª–æ–≤ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–∂–¥—è',
                       '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –º–µ—Å—è—á–Ω—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –≥. –ö–∞–∑–∞–Ω—å –Ω–∞–±–ª—é–¥–∞–ª–∏—Å—å –≤ —è–Ω–≤–∞—Ä–µ 1891-–≥–æ (-21 –≥—Ä–∞–¥—É—Å) –∏ —Ñ–µ–≤—Ä–∞–ª–µ 1954 –≥–æ–¥–∞ (-20 –≥—Ä–∞–¥—É—Å–æ–≤)']
    global iter_foto
    iter_foto = iter(foto_list)
    global iter_fact
    iter_fact = iter(fact_list)


generic_path()


@bot.message_handler(commands=['start', 'low', 'high', 'custom', 'history'])
def start(message):
    """–§—É–Ω–∫—Ü–∏—è - –º–µ–Ω—é, –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –∏ –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥"""

    if message.text == '/start':
        answer = '–î–æ–±—Ä—ã–π –¥–µ–Ω—å' if 6 < datetime.now().hour < 17 else '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä'
        markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        bt1 = telebot.types.KeyboardButton('–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ')
        bt2 = telebot.types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º')
        bt3 = telebot.types.KeyboardButton('–ü–æ–≥–æ–¥–∞ –≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö')
        markup.add(bt1, bt2, bt3)
        bot.send_message(message.chat.id,
                         f'{answer} <b>{message.from_user.username}!</b> –í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ '
                         f'–Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é\n', reply_markup=markup, parse_mode='html')
        bot.send_message(message.chat.id, 'üåó')

    elif message.text == '/low':
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è:')
        bot.register_next_step_handler(message, get_weather_min)
    elif message.text == '/high':
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è:')
        bot.register_next_step_handler(message, get_weather_max)
    elif message.text == '/history':
        bot.send_message(message.chat.id, '<b>–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤:</b>', parse_mode='html')
        history(message)
    else:
        bot.send_message(message.chat.id, '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –º–µ–Ω—é.')


def info(message):
    '''–§—É–Ω–∫—Ü–∏—è - –≤—ã–≤–æ–¥—è—â–∞—è –≤ —á–∞—Ç –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥'''

    bot.send_message(message.chat.id, '<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∞',
                     parse_mode='html')
    bot.send_message(message.chat.id, '1. /start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é')
    bot.send_message(message.chat.id, '2. /low - —É–∑–Ω–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è')
    bot.send_message(message.chat.id, '3. /high - —É–∑–Ω–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è')
    bot.send_message(message.chat.id, '4. /history - –ò—Å—Ç–æ–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤.')


def emoji_determinant(responce: str) -> str:
    '''–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –ø–æ–≥–æ–¥—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏'''
    emoji = {'Rain': 'üå®', 'Clouds': '‚õÖÔ∏è', 'Clear': '‚òÄÔ∏è', 'Snow': '‚ùÑÔ∏è'}
    if responce in emoji.keys():
        return emoji.get(responce)
    return '‚òÄÔ∏è'


def get_weather(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ API-—Å–∞–π—Ç, –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∫–∞–∫ –æ—â—É—â–∞–µ—Ç—Å—è, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –ë–î"""
    try:
        weather = site_api.get_response()
        response = weather(url, message.text, headers)
        data = [{'user_name': message.from_user.username, 'user_city': message.text, 'temp_now': response[0],
                 'temp_like_now': response[1], 'other': 0}]
        db_write(db, History, data)

        bot.send_message(message.chat.id, f'–ü–æ–≥–æ–¥–∞ –≤ {message.text}: <b>{response[0]}</b> ‚ÑÉ\n'
                                          f'–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: <b>{response[1]}</b> ‚ÑÉ {emoji_determinant(response[4])}',
                         parse_mode='html')
    except TypeError:
        bot.send_message(message.chat.id, ex1_type_err, parse_mode='html')


def get_weather_min(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ API-—Å–∞–π—Ç, –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –ë–î"""
    try:
        weather = site_api.get_response()
        response = weather(url, message.text, headers)
        data = [{'user_name': message.from_user.username, 'user_city': message.text, 'temp_now': 0, 'temp_like_now': 0,
                 'other': response[2]}]
        db_write(db, History, data)

        bot.send_message(message.chat.id, f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –≤ {message.text}: <b>{response[2]}</b> '
                                          f'‚ÑÉ {emoji_determinant(response[4])}', parse_mode='html')
    except TypeError:
        bot.send_message(message.chat.id, ex1_type_err, parse_mode='html')


def get_weather_max(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ API-—Å–∞–π—Ç, –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –ë–î"""
    try:
        weather = site_api.get_response()
        response = weather(url, message.text, headers)
        data = [{'user_name': message.from_user.username, 'user_city': message.text, 'temp_now': 0, 'temp_like_now': 0,
                 'other': response[3]}]
        db_write(db, History, data)

        bot.send_message(message.chat.id,
                         f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –≤ {message.text}: <b>{response[3]}</b> ‚ÑÉ'
                         f'{emoji_determinant(response[4])}', parse_mode='html')
    except TypeError:
        bot.send_message(message.chat.id, ex1_type_err, parse_mode='html')


def history(message):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —á–∞—Ç –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤"""
    db_read = crud.retrieve()

    retrieved = db_read(db, message.from_user.username, History, History.user_name, History.user_city, History.temp_now,
                        History.temp_like_now, History.other)

    for idx, el in enumerate(reversed(retrieved)):
        if idx == 10:
            break
        bot.send_message(message.chat.id, f'{el.user_name, el.user_city, el.temp_now, el.temp_like_now, el.other}')


def get_foto(message, path, fact):
    '''–§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ –ø–æ –ø—É—Ç–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –≤ –º–µ—Å–µ–Ω–¥–∂–µ—Ä'''
    with open(path, 'rb') as f:
        bot.send_message(message.chat.id, fact)
        bot.send_photo(message.chat.id, f)


@bot.message_handler(content_types=['text'])
def menu(message):
    '''–§—É–Ω–∫—Ü–∏—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –∏–∑ –º–µ–Ω—é'''

    if message.text.lower() == '—É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ':
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –±–æ—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏—Å–∫–æ–º –∏–ª–∏ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ')
        bot.register_next_step_handler(message, get_weather)
    elif message.text.lower() == '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º':
        info(message)
    elif message.text.lower() == '–ø–æ–≥–æ–¥–∞ –≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö':
        try:
            get_foto(message, path=next(iter_foto), fact=next(iter_fact))
        except (TimeoutError, ConnectionError, ConnectionAbortedError, ConnectionAbortedError):
            get_foto(message, path=next(iter_foto), fact=next(iter_fact))
        except StopIteration:
            generic_path()
    else:
        bot.send_message(message.chat.id, f'{message.from_user.username}, –≤—ã –≤–≤–µ–ª–∏: {message.text}, \n<b>–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å '
                                          f'–∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é</b>', parse_mode='html')


while True:
    try:
        if __name__ == '__main__':
            bot.polling(none_stop=True)
    except:
        continue
# if __name__ == '__main__':
#     bot.polling(none_stop=True)